version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: insurance-postgres
    environment:
      POSTGRES_DB: insurance_claims
      POSTGRES_USER: insurance_admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password_123}
      POSTGRES_INIT_DB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.utf8 --lc-ctype=en_US.utf8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U insurance_admin -d insurance_claims"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - insurance-network

  # MinIO (S3-compatible object storage)
  minio:
    image: minio/minio:latest
    container_name: insurance-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - insurance-network

  # Keycloak (Identity and Access Management)
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: insurance-keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/insurance_claims
      KC_DB_USERNAME: insurance_admin
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-dev_password_123}
      KC_DB_SCHEMA: keycloak
      KC_HTTP_ENABLED: "true"
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin123}
    command:
      - start-dev
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - insurance-network

  # Redis (for caching and message queue)
  redis:
    image: redis:7-alpine
    container_name: insurance-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - insurance-network

  # RabbitMQ (Message Broker)
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: insurance-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-rabbitmq}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-rabbitmq123}
      RABBITMQ_DEFAULT_VHOST: insurance
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - insurance-network

  # Example microservice (healthcheck service)
  healthcheck-service:
    build:
      context: ./dockerfiles
      dockerfile: Dockerfile.micro
    container_name: insurance-healthcheck
    environment:
      SERVICE_NAME: healthcheck
      DATABASE_URL: postgresql://insurance_admin:${POSTGRES_PASSWORD:-dev_password_123}@postgres:5432/insurance_claims
      REDIS_URL: redis://redis:6379/0
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-rabbitmq}:${RABBITMQ_PASS:-rabbitmq123}@rabbitmq:5672/insurance
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - insurance-network

  # AI Processing Service
  ai-processing-service:
    build:
      context: ..
      dockerfile: infra/dockerfiles/Dockerfile.ai
    container_name: insurance-ai-processing
    environment:
      SERVICE_NAME: ai-processing
      DATABASE_URL: postgresql://insurance_admin:${POSTGRES_PASSWORD:-dev_password_123}@postgres:5432/insurance_claims
      REDIS_URL: redis://redis:6379/0
      GROQ_API_KEY: ${GROQ_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      PINECONE_API_KEY: ${PINECONE_API_KEY:-}
      PINECONE_ENVIRONMENT: ${PINECONE_ENVIRONMENT:-us-east-1-aws}
      EMBEDDING_STRATEGY: ${EMBEDDING_STRATEGY:-local}
      VECTOR_DB_TYPE: ${VECTOR_DB_TYPE:-pinecone}
      PYTHONUNBUFFERED: 1
    ports:
      - "8005:8005"
    volumes:
      - ../data:/app/data:ro  # Read-only access to policy documents
      - ai_data:/app/vector_db  # Persistent vector database
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - insurance-network

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  ai_data:
    driver: local

networks:
  insurance-network:
    driver: bridge
    name: insurance-network